{"version":3,"sources":["assets/media/logo.svg","assets/media/bg-square-tiled-2.png","screens/Home.js","assets/GLSL/planeShaders.js","Root.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","initiateSphere","gl","webGLCheck","current","getContext","getRadians","degrees","Math","PI","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","light","AmbientLight","add","clock","Clock","texture","TextureLoader","load","bgSquare","planeGeometry","PlaneGeometry","shaderMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","uTime","value","uTexture","type","transparent","opacity","planeMesh","Mesh","pointLight","PointLight","set","pointLight2","renderer","WebGLRenderer","antialias","setClearColor","setSize","setPixelRatio","min","devicePixelRatio","domElement","classList","style","sceneContainer","appendChild","geometry","SphereBufferGeometry","material","MeshStandardMaterial","color","sphere","rotation","x","ringGeometries","ringMeshes","addEventListener","event","aspect","updateProjectionMatrix","renderCount","render","forEach","ringMesh","dispose","remove","map","ringGeometry","mesh","getElapsedTime","requestAnimationFrame","setTimeout","state","loading","React","createRef","landingContent","prevProps","prevState","scrollTo","document","fonts","ready","then","setState","label","padding","className","this","visibility","width","height","src","logo","alt","ref","display","alignItems","paddingLeft","textAlign","top","left","transform","textShadow","fontSize","zIndex","Component","Root","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,+C,oOC6M5BC,E,kDAxLb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,eAAiB,WACf,IACMC,EADS,EAAKC,WAAWC,QACbC,WAAW,SACzBC,EAAa,SAACC,GAChB,OAAOA,GAASC,KAAKC,GAAG,MAE1B,GAAKP,EAAL,CAGE,IAAIQ,EAAQ,IAAIC,IACZC,EAAS,IAAIC,IAAmB,GAAIC,OAAOC,WAAaD,OAAOE,YAAa,EAAG,KACnFJ,EAAOK,SAASC,EAAE,EAClB,IAAIC,EAAQ,IAAIC,IAAc,UAC9BV,EAAMW,IAAKF,GACX,IAAIG,EAAQ,IAAIC,IACZC,GAAU,IAAIC,KAAgBC,KAAMC,KACpCC,EAAgB,IAAIC,IAAc,GAAc,EAAa,GAAK,GAClEC,EAAiB,IAAIC,IAAe,CACtCC,aCvCiB,s9GDwCjBC,eClDmB,0KDmDnBC,SAAU,CACRC,MAAO,CAAEC,MAAO,GAChBC,SAAU,CAAGC,KAAM,IAAKF,MAAOZ,IAEjCe,aAAa,EACbC,QAAS,KAIPC,EAAY,IAAIC,IAAKd,EAAeE,GACxCpB,EAAMW,IAAIoB,GACV,IAAIE,EAAa,IAAIC,IAAY,SAAU,EAAG,KAC9CD,EAAW1B,SAAS4B,IAAK,GAAI,GAAI,IACjCnC,EAAMW,IAAKsB,GACX,IAAIG,EAAc,IAAIF,IAAY,SAAU,EAAG,KAC/CE,EAAY7B,SAAS4B,KAAM,IAAK,IAAK,IACrCnC,EAAMW,IAAKyB,GACX,IAAIC,EAAW,IAAIC,IAAc,CAACC,WAAU,IAC5CF,EAASG,cAAc,WACvBH,EAASI,QAAQrC,OAAOC,WAAWD,OAAOE,aAC1C+B,EAASK,cAAc5C,KAAK6C,IAAI,IAAKvC,OAAOwC,mBAC5CP,EAASQ,WAAWC,UAAUnC,IAAI,qBAClC0B,EAASQ,WAAWE,MAAMjB,QAAQ,EAClC,EAAKkB,eAAetD,QAAQuD,YAAYZ,EAASQ,YACjD,IAAIK,EAAW,IAAIC,IAAsB,GAAK,GAAI,MAC9CC,EAAW,IAAIC,IAAsB,CAACC,MAAO,IAC7CC,EAAS,IAAIvB,IAAMkB,EAAUE,GACjCG,EAAOC,SAASC,EAAE,GAClB,IAAIA,EAAI,EACJC,EAAiB,GACjBC,EAAa,GACjBvD,OAAOwD,iBAAiB,UAAU,SAACC,GACjCxB,EAASI,QAAQrC,OAAOC,WAAWD,OAAOE,aAC1CJ,EAAO4D,OAAS1D,OAAOC,WAAWD,OAAOE,YACzCJ,EAAO6D,4BAKT,IAAIC,EAAc,GACJ,SAAVC,IACFR,GAAG,KACHO,GAAa,GACG,IAAI,IAClBL,EAAWO,SAAQ,SAACC,GAClBA,EAASjB,SAASkB,UAClBD,EAASf,SAASgB,UAClBpE,EAAMqE,OAAOF,MAEfT,EAAiB,CACf,IAAIP,IAAsB,KAAO,GAAI,GAAK,EAAY,EAARrD,KAAKC,GAAKH,GAAY,EAAE6D,GAAG,KAAO7D,EAAW,IAC3F,IAAIuD,IAAsB,KAAO,GAAI,GAAK,EAAY,EAARrD,KAAKC,GAAKH,GAAY,GAAG6D,GAAG,KAAO7D,EAAW,IAC5F,IAAIuD,IAAsB,KAAO,GAAI,GAAK,EAAY,EAARrD,KAAKC,GAAKH,GAAY,GAAG6D,GAAG,KAAO7D,EAAW,IAC5F,IAAIuD,IAAsB,KAAO,GAAI,GAAK,EAAY,EAARrD,KAAKC,GAAKH,GAAY,GAAG6D,GAAG,KAAO7D,EAAW,IAC5F,IAAIuD,IAAsB,KAAO,GAAI,GAAK,EAAY,EAARrD,KAAKC,GAAKH,GAAY,GAAG6D,GAAG,KAAO7D,EAAW,IAC5F,IAAIuD,IAAsB,KAAO,GAAI,GAAK,EAAY,EAARrD,KAAKC,GAAKH,GAAY,GAAG6D,GAAG,KAAO7D,EAAW,IAC5F,IAAIuD,IAAsB,KAAO,GAAI,GAAK,EAAY,EAARrD,KAAKC,GAAKH,GAAY,IAAI6D,GAAG,KAAO7D,EAAW,IAC7F,IAAIuD,IAAsB,KAAO,GAAI,GAAK,EAAY,EAARrD,KAAKC,GAAKH,GAAY,IAAI6D,GAAG,KAAO7D,EAAW,IAC7F,IAAIuD,IAAsB,KAAO,GAAI,GAAK,EAAY,EAARrD,KAAKC,GAAKH,GAAY,IAAI6D,GAAG,KAAO7D,EAAW,IAC7F,IAAIuD,IAAsB,KAAO,GAAI,GAAK,EAAY,EAARrD,KAAKC,GAAKH,GAAY,IAAI6D,GAAG,KAAO7D,EAAW,IAC7F,IAAIuD,IAAsB,KAAO,GAAI,GAAK,EAAY,EAARrD,KAAKC,GAAKH,GAAY,IAAI6D,GAAG,KAAO7D,EAAW,KAE/F+D,EAAaD,EAAeY,KAAI,SAAAC,GAC9B,IAAIC,EAAO,IAAIxC,IAAMuC,EAAc,IAAIlB,IAAsB,CAACC,MAAO,YAGrE,OAFAkB,EAAKhB,SAASC,EAAE,GAChBzD,EAAMW,IAAI6D,GACHA,KAETxE,EAAMW,IAAK4C,IAGbnC,EAAeI,SAASC,MAAMC,MAAQd,EAAM6D,iBAC5CC,sBAAsBT,GACtB5B,EAAS4B,OAAOjE,EAAOE,GAEzB+D,GACAU,YAAW,WACTtC,EAASQ,WAAWE,MAAMjB,QAAQ,IACjC,OA1GL,EAAK8C,MAAQ,CACXC,SAAQ,GAEV,EAAK7B,eAAe8B,IAAMC,YAC1B,EAAKtF,WAAWqF,IAAMC,YACtB,EAAKC,eAAeF,IAAMC,YAPT,E,+DAgHAE,EAAWC,M,0CAWT,IAAD,OAIlB9E,OAAO+E,SAAS,EAAE,GACdC,SAASC,OACXD,SAASC,MAAMC,MAAMC,MAAM,WACzB,EAAKC,SAAS,CACZX,SAAQ,IACP,WACDF,YAAW,WACT,EAAKpF,iBACLoF,YAAW,WACT,EAAKK,eAAetF,QAAQqD,MAAMjB,QAAQ,IACzC,OACF,a,+EAUP,OACE,6BAAS2D,MAAM,cAAc1C,MAAO,CAAC2C,QAAQ,MAC3C,6BAASD,MAAM,mBACb,yBAAKE,UAAU,SAAS5C,OAA4B,IAArB6C,KAAKhB,MAAMC,QAAiB,CAACgB,WAAW,WAAW,CAACA,WAAW,WAC5F,yBAAKF,UAAU,iBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,iBAGjB,yBAAK5C,MAAO,CAAC+C,MAAM,OAAQC,OAAO,OAAQL,QAAQ,QAChD,yBAAK3C,MAAO,CAAC+C,MAAM,OAAQC,OAAO,QAASC,IAAKC,IAAMC,IAAI,QAIhE,yBAAKC,IAAKP,KAAKZ,eAAgBS,MAAM,kBAAkBE,UAAU,mBAC/D,yBAAK5C,MAAO,CAACqD,QAAQ,OAAQC,WAAW,SAAUC,YAAY,MAAOX,UAAU,aAC7E,yBAAK5C,MAAO,CAACgD,OAAO,OAAQG,IAAI,GAAGF,IAAKC,MAExC,gCAGF,yBAAKlD,MAAO,CAACwD,UAAU,SAAUhG,SAAS,WAAYuF,MAAM,OAAQU,IAAI,MAAOC,KAAK,MAAOC,UAAU,wBAAyBf,UAAU,kBACtI,uBAAGA,UAAU,aAAa5C,MAAO,CAACO,MAAM,QAASqD,WAAW,mFAA5D,cACA,uBAAG5D,MAAO,CAACO,MAAM,QAASsD,SAAS,OAAQD,WAAW,mFAAtD,wBAGJ,4BAAQR,IAAKP,KAAKnG,WAAYsD,MAAO,CAACqD,QAAQ,UAC9C,yBAAKrD,MAAO,CAACxC,SAAS,WAAYiG,IAAI,IAAKK,OAAO,MAAOV,IAAKP,KAAK5C,uB,GAhL5D8B,IAAMgC,WEoBVC,E,kDAnCb,WAAYzH,GAAQ,IAAD,8BACjB,cAAMA,IACDsF,MAAQ,GAFI,E,+DAMAK,EAAWC,M,4HAqB1B,OACE,yBAAKS,UAAU,cAAc5C,MAAO,CAAC2C,QAAQ,MAC3C,kBAAC,EAAD,W,GA9BSZ,IAAMgC,WCQLE,QACW,cAA7B5G,OAAO6G,SAASC,UAEe,UAA7B9G,OAAO6G,SAASC,UAEhB9G,OAAO6G,SAASC,SAASC,MACvB,2DCbNC,IAASnD,OACP,kBAAC,IAAMoD,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAclC,MACrBC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.51f1be84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4513c5e2.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg-square-tiled-2.d213f3d9.png\";","import React from 'react';\r\nimport '../assets/styles/Home.css';\r\nimport logo from '../assets/media/logo.svg';\r\nimport bgSquare from '../assets/media/bg-square-tiled-2.png';\r\n// import Stats from 'stats.js';\r\nimport {\r\n  Scene, \r\n  PerspectiveCamera, \r\n  AmbientLight, \r\n  PointLight, \r\n  WebGLRenderer, \r\n  SphereBufferGeometry, \r\n  TextureLoader, \r\n  ShaderMaterial, \r\n  Clock, \r\n  PlaneGeometry, \r\n  MeshStandardMaterial, \r\n  Mesh\r\n} from 'three'\r\nimport {vertexShader, fragmentShader} from \"../assets/GLSL/planeShaders.js\";\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading:true\r\n    };\r\n    this.sceneContainer=React.createRef();\r\n    this.webGLCheck=React.createRef();\r\n    this.landingContent=React.createRef();\r\n  }\r\n\r\n  initiateSphere = () => {\r\n    const mainGL = this.webGLCheck.current;\r\n    const gl = mainGL.getContext('webgl');\r\n    let getRadians = (degrees) => {\r\n      return degrees*(Math.PI/180);\r\n    }\r\n    if (!gl) {\r\n      return ;\r\n    } else {\r\n      let scene = new Scene();\r\n      let camera = new PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 100 );\r\n      camera.position.z=5;\r\n      let light = new AmbientLight( 0xffffff );\r\n      scene.add( light );\r\n      let clock = new Clock();\r\n      var texture = new TextureLoader().load( bgSquare);\r\n      let planeGeometry = new PlaneGeometry(1000/(10*10), 500/(10*10), 10 , 5);\r\n      let shaderMaterial = new ShaderMaterial({\r\n        vertexShader,\r\n        fragmentShader,\r\n        uniforms: {\r\n          uTime: { value: 0.0 },\r\n          uTexture: {  type: 't', value: texture}\r\n        },\r\n        transparent: true,\r\n        opacity: 0.5\r\n        // wireframe: true,\r\n        // side: DoubleSide\r\n      });\r\n      let planeMesh = new Mesh(planeGeometry, shaderMaterial);\r\n      scene.add(planeMesh);\r\n      var pointLight = new PointLight( 0xff0000, 1, 100 );\r\n      pointLight.position.set( 50, 50, 50 );\r\n      scene.add( pointLight );\r\n      var pointLight2 = new PointLight( 0xff0000, 1, 100 );\r\n      pointLight2.position.set( -50, -50, -50 );\r\n      scene.add( pointLight2 );\r\n      let renderer = new WebGLRenderer({antialias:true});\r\n      renderer.setClearColor(\"#ffffff\");\r\n      renderer.setSize(window.innerWidth,window.innerHeight);\r\n      renderer.setPixelRatio(Math.min(2.5, window.devicePixelRatio));\r\n      renderer.domElement.classList.add('opacityTransition');\r\n      renderer.domElement.style.opacity=0;\r\n      this.sceneContainer.current.appendChild(renderer.domElement);\r\n      let geometry = new SphereBufferGeometry( 0.3, 50, 5050 );\r\n      let material = new MeshStandardMaterial( {color: 0x000000} );\r\n      let sphere = new Mesh( geometry, material );\r\n      sphere.rotation.x=0.5;\r\n      let x = 1;\r\n      let ringGeometries = [];\r\n      let ringMeshes = [];\r\n      window.addEventListener('resize', (event) => {\r\n        renderer.setSize(window.innerWidth,window.innerHeight);\r\n        camera.aspect = window.innerWidth/window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n      })\r\n      // var stats = new Stats();\r\n      // stats.showPanel( 1 ); // 0: fps, 1: ms, 2: mb, 3+: custom\r\n      // document.body.appendChild( stats.dom );\r\n      let renderCount = 0;\r\n      let render = (() => {\r\n        x+=0.25;\r\n        renderCount+=1;\r\n        if (renderCount%2===0) {\r\n          ringMeshes.forEach((ringMesh) => {\r\n            ringMesh.geometry.dispose();\r\n            ringMesh.material.dispose();\r\n            scene.remove(ringMesh);\r\n          })\r\n          ringGeometries = [\r\n            new SphereBufferGeometry( 0.301, 50, 50 , 0 , Math.PI*2,getRadians((0+x)%180) , getRadians(5)),\r\n            new SphereBufferGeometry( 0.301, 50, 50 , 0 , Math.PI*2,getRadians((18+x)%180) , getRadians(5)),\r\n            new SphereBufferGeometry( 0.301, 50, 50 , 0 , Math.PI*2,getRadians((36+x)%180) , getRadians(5)),\r\n            new SphereBufferGeometry( 0.301, 50, 50 , 0 , Math.PI*2,getRadians((54+x)%180) , getRadians(5)),\r\n            new SphereBufferGeometry( 0.301, 50, 50 , 0 , Math.PI*2,getRadians((72+x)%180) , getRadians(5)),\r\n            new SphereBufferGeometry( 0.301, 50, 50 , 0 , Math.PI*2,getRadians((90+x)%180) , getRadians(5)),\r\n            new SphereBufferGeometry( 0.301, 50, 50 , 0 , Math.PI*2,getRadians((108+x)%180) , getRadians(5)),\r\n            new SphereBufferGeometry( 0.301, 50, 50 , 0 , Math.PI*2,getRadians((126+x)%180) , getRadians(5)),\r\n            new SphereBufferGeometry( 0.301, 50, 50 , 0 , Math.PI*2,getRadians((144+x)%180) , getRadians(5)),\r\n            new SphereBufferGeometry( 0.301, 50, 50 , 0 , Math.PI*2,getRadians((162+x)%180) , getRadians(5)),\r\n            new SphereBufferGeometry( 0.301, 50, 50 , 0 , Math.PI*2,getRadians((180+x)%180) , getRadians(5))\r\n          ];\r\n          ringMeshes = ringGeometries.map(ringGeometry => {\r\n            let mesh = new Mesh( ringGeometry, new MeshStandardMaterial( {color: 0xd4af37} ));\r\n            mesh.rotation.x=0.5;\r\n            scene.add(mesh);\r\n            return mesh\r\n          });\r\n          scene.add( sphere );\r\n        }\r\n        // stats.update();\r\n        shaderMaterial.uniforms.uTime.value = clock.getElapsedTime();\r\n        requestAnimationFrame(render);\r\n        renderer.render(scene, camera);\r\n      })\r\n      render();\r\n      setTimeout(() => {\r\n        renderer.domElement.style.opacity=1;\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Object.entries(this.props).forEach(([key, val]) =>\r\n    //   prevProps[key] !== val && console.log(`Home's Prop '${key}' changed`)\r\n    // );\r\n    // if (this.state) {\r\n    //   Object.entries(this.state).forEach(([key, val]) =>\r\n    //     prevState[key] !== val && console.log(`Home's State '${key}' changed`)\r\n    //   );\r\n    // }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // if (window.gaLoaded) {\r\n    //   window.ga('send', 'pageview', 'About');\r\n    // }\r\n    window.scrollTo(0,1);\r\n    if (document.fonts) {\r\n      document.fonts.ready.then( ()=> {\r\n        this.setState({\r\n          loading:false\r\n        }, () => {\r\n          setTimeout(() => {\r\n            this.initiateSphere();\r\n            setTimeout(() => {\r\n              this.landingContent.current.style.opacity=1;\r\n            }, 2000);\r\n          }, 500);\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <section label=\"home-screen\" style={{padding:'0'}}>\r\n          <section label=\"landing-section\">\r\n            <div className=\"loader\" style={this.state.loading===true ? {visibility:'visible'}:{visibility:'hidden'}}>\r\n              <div className=\"loader-circle\">\r\n                <div className=\"loader-line-mask\">\r\n                  <div className=\"loader-line\">\r\n                  </div>\r\n                </div>\r\n                <div style={{width:'100%', height:'100%', padding:'40%'}}>\r\n                  <img style={{width:'100%', height:'100%'}} src={logo} alt=\"\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div ref={this.landingContent} label=\"landing-content\" className=\"landing-content\">\r\n              <div style={{display:'flex', alignItems:'center', paddingLeft:'5%'}} className=\"home-logo\">\r\n                <img style={{height:'60%'}} alt=\"\" src={logo} />\r\n                {/* <p style={{color:'black', fontSize:'22px', textShadow:'-1px -1px 0 #d4af37, 1px -1px 0 #d4af37, -1px 1px 0 #d4af37, 1px 1px 0 #d4af37'}}>Sample Text</p>  */}\r\n                <span>\r\n                </span>\r\n              </div>\r\n              <div style={{textAlign:'center', position:'absolute', width:'100%', top:'50%', left:'50%', transform:'translate(-50%,-50%)'}} className=\"content-center\">\r\n                <p className=\"text-large\" style={{color:'black', textShadow:'-1px -1px 0 #d4af37, 1px -1px 0 #d4af37, -1px 1px 0 #d4af37, 1px 1px 0 #d4af37'}}>HARI SHYAM</p>\r\n                <p style={{color:'black', fontSize:'12px', textShadow:'-1px -1px 0 #d4af37, 1px -1px 0 #d4af37, -1px 1px 0 #d4af37, 1px 1px 0 #d4af37'}}>chao meus magister</p>\r\n              </div>\r\n            </div>\r\n            <canvas ref={this.webGLCheck} style={{display:'none'}}></canvas>\r\n            <div style={{position:'absolute', top:'0', zIndex:'-1'}} ref={this.sceneContainer}>\r\n\r\n            </div>\r\n          </section>\r\n        </section>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","export const fragmentShader = `\r\n  varying vec2 vUv;\r\n  uniform sampler2D uTexture;\r\n\r\n  void main() {\r\n    vec3 texture = texture2D(uTexture, vUv).rgb;\r\n    gl_FragColor = vec4(texture, 1.);\r\n  }\r\n`\r\n\r\nexport const vertexShader = `\r\n  precision mediump float;\r\n\r\n  varying vec2 vUv;\r\n  uniform float uTime;\r\n\r\n  //\r\n  // Description : Array and textureless GLSL 2D/3D/4D simplex\r\n  //               noise functions.\r\n  //      Author : Ian McEwan, Ashima Arts.\r\n  //  Maintainer : ijm\r\n  //     Lastmod : 20110822 (ijm)\r\n  //     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\r\n  //               Distributed under the MIT License. See LICENSE file.\r\n  //               https://github.com/ashima/webgl-noise\r\n  //\r\n\r\n  vec3 mod289(vec3 x) {\r\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n  }\r\n\r\n  vec4 mod289(vec4 x) {\r\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n  }\r\n\r\n  vec4 permute(vec4 x) {\r\n      return mod289(((x*34.0)+1.0)*x);\r\n  }\r\n\r\n  vec4 taylorInvSqrt(vec4 r)\r\n  {\r\n    return 1.79284291400159 - 0.85373472095314 * r;\r\n  }\r\n\r\n  float snoise(vec3 v) {\r\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\r\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\r\n    \r\n    // First corner\r\n    vec3 i  = floor(v + dot(v, C.yyy) );\r\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\r\n    \r\n    // Other corners\r\n    vec3 g = step(x0.yzx, x0.xyz);\r\n    vec3 l = 1.0 - g;\r\n    vec3 i1 = min( g.xyz, l.zxy );\r\n    vec3 i2 = max( g.xyz, l.zxy );\r\n\r\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\r\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\r\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\r\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\r\n    vec3 x1 = x0 - i1 + C.xxx;\r\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\r\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\r\n    \r\n    // Permutations\r\n    i = mod289(i);\r\n    vec4 p = permute( permute( permute(\r\n              i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\r\n            + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\r\n            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\r\n            \r\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\r\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\r\n    float n_ = 0.142857142857; // 1.0/7.0\r\n    vec3  ns = n_ * D.wyz - D.xzx;\r\n\r\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\r\n\r\n    vec4 x_ = floor(j * ns.z);\r\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\r\n\r\n    vec4 x = x_ *ns.x + ns.yyyy;\r\n    vec4 y = y_ *ns.x + ns.yyyy;\r\n    vec4 h = 1.0 - abs(x) - abs(y);\r\n\r\n    vec4 b0 = vec4( x.xy, y.xy );\r\n    vec4 b1 = vec4( x.zw, y.zw );\r\n\r\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\r\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\r\n    vec4 s0 = floor(b0)*2.0 + 1.0;\r\n    vec4 s1 = floor(b1)*2.0 + 1.0;\r\n    vec4 sh = -step(h, vec4(0.0));\r\n\r\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\r\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\r\n\r\n    vec3 p0 = vec3(a0.xy,h.x);\r\n    vec3 p1 = vec3(a0.zw,h.y);\r\n    vec3 p2 = vec3(a1.xy,h.z);\r\n    vec3 p3 = vec3(a1.zw,h.w);\r\n    \r\n    // Normalise gradients\r\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\r\n    p0 *= norm.x;\r\n    p1 *= norm.y;\r\n    p2 *= norm.z;\r\n    p3 *= norm.w;\r\n    \r\n    // Mix final noise value\r\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\r\n    m = m * m;\r\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\r\n                                  dot(p2,x2), dot(p3,x3) ) );\r\n  }\r\n\r\n  void main() {\r\n    vUv = uv;\r\n\r\n    vec3 pos = position;\r\n    float noiseFreq = 7.0;\r\n    float noiseAmp = 0.03; \r\n    vec3 noisePos = vec3(pos.x * noiseFreq + uTime, pos.y, pos.z);\r\n    pos.z += snoise(noisePos) * noiseAmp;\r\n\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\r\n  }\r\n`","import React from 'react';\nimport './assets/styles/Root.css';\nimport Home from './screens/Home';\n\nclass Root extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Object.entries(this.props).forEach(([key, val]) =>\n    //   prevProps[key] !== val && console.log(`Home's Prop '${key}' changed`)\n    // );\n    // if (this.state) {\n    //   Object.entries(this.state).forEach(([key, val]) =>\n    //     prevState[key] !== val && console.log(`Home's State '${key}' changed`)\n    //   );\n    // }\n  }\n\n  componentDidMount() {\n    // if (window.gaLoaded) {\n    //   window.ga('send', 'pageview', 'About');\n    // }\n  }\n\n  componentWillUnmount() {\n  }\n\n  render() {\n      return (\n        <div className=\"root-screen\" style={{padding:'0'}}>\n          <Home />\n        </div>\n      );\n  }\n}\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}